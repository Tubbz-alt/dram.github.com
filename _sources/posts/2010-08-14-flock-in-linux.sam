article: Linux中的flock(2)

	之前写过{如何}(http://dram.blog.35.cn/2010/08/05/file-lock-in-shell/)在SHELL中使用文件锁，这里对flock作更为详细的说明。

	先说说advisory锁与mandatory锁的区别，从字面上理解，advisory是建议性的，而mandatory则是强制性的。advisory lock只是文件的一个属性，它并没有对文件的内容进行保护，程序在没有获得锁时仍然可以修改文件的内容。而mandatory lock则是对文件的内容进行保护。flock是一个advisory锁，所以文件的完整性是由程序保证的。{这里}(http://www.esus.com/javaindex/j2se/jdk1.2/nio/niomanadvlock.html)对这两者有简单的说明。

	在使用flock时，需要明确`LOCK_SH`和`LOCK_EX`的概念。在一个文件被锁的前提下，如果该锁是`LOCK_EX`，所有其它请求`LOCK_SH`或`LOCK_EX`的进程都将被block，当该锁是`LOCK_SH`时，进程请求`LOCK_SH`将被通过，而请求`LOCK_EX`将被block。

	Linux中flock是基于file table实现的，所以在fork()或dup()之后，可以有多个fd共享锁，而解锁必须要显式地使用`LOCK_UN`或关闭所有与该file table entry相关联的fd。 最后，{Wikipedia}(http://en.wikipedia.org/wiki/File_locking)有对Linux及Windows中的文件锁比较详尽的说明，值得一读。
