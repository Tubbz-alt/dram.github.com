article: 基于C的CLIPS Web服务

	topic: 补遗

		1. 虽然在CLIPS中`open`接口不支持以读写方式打开文件，但是在用C创建router时并没有约束，可以直接将读写句柄赋值给`router->stream`，所以以下代码可以简化。—— 2017-10-04
		2. router相关的代码是参考{filertr.c}(https://github.com/dram/clips-mirror/blob/03593bee8ef2c15815ce585c18e30f7f1e54f269/branches/64x/core/filertr.c)中的`OpenAFile`函数实现的。—— 2017-10-04
		3. 如果要保持与CLIPS`close`接口的兼容性，`logicalName`需要基于`gm2`申请内存，因为`CloseFile`包含有释放该内存的动作。—— 2017-10-04
		4. 如果需要更严谨些，在程序结束时，`net-in`和`net-out`需要调用`CloseFile`关闭以回收内存。—— 2017-10-04
		5. 以读写的方式`fdopen` socket句柄不具可移植性，在Cygwin中没有问题，但在Linux下会出现Illegal seek错误，详见{这里}(https://stackoverflow.com/a/10257164/5180632)。—— 2017-10-09

	前阵子有{介绍}(link "/blog/2017/09/03/clips-web-service.html")基于socat工具搭建CLIPS Web服务，但依赖第三方工具，且依赖proc系统以及固定的fd编号，总体并不灵活。

	以下介绍使用CLIPS的C接口实现简易Web服务，代码目录结构如下：

	```
		serve-web/
		├── clips -> link/to/clips/code/
		├── main.clp
		├── Makefile
		└── serve.c

	其中`serve.c`为C接口代码，`main.clp`为主体服务代码，`Makefile`为编译过程封装。以下为具体内容：

	`serve.c`：

	```(c)
		#include <netinet/in.h>
		#include <sys/socket.h>
		
		#include "clips/clips.h"
		
		int main(int argc, char *argv[])
		{
			int sock;
			if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1)
				goto error;
			
			struct sockaddr_in addr;
			addr.sin_family = AF_INET;
			addr.sin_addr.s_addr = INADDR_ANY;
			addr.sin_port = htons(5000);
			if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) == -1)
				goto error;
		
			if (listen(sock, 5) == -1)
				goto error;
		
			Environment *env = CreateEnvironment();
			RerouteStdin(env, argc, argv);
		
			struct fileRouter *in_router = get_struct(env, fileRouter);
			in_router->logicalName = "net-in";
			struct fileRouter *out_router = get_struct(env, fileRouter);
			out_router->logicalName = "net-out";
			in_router->next = out_router;
			out_router->next = FileRouterData(env)->ListOfFileRouters;
			FileRouterData(env)->ListOfFileRouters = in_router;
		
			BatchStar(env, "main.clp");
		
			int conn;
			while ((conn = accept(sock, NULL, NULL)) != -1) {
				Reset(env);
		
				in_router->stream = fdopen(conn, "r");
				out_router->stream = fdopen(conn, "w");
		
				Run(env, -1);
		
				fclose(in_router->stream);
				fclose(out_router->stream);
			}
		
		error:
			perror("main");
		
			DestroyEnvironment(env);
		
			return 1;
		}

	`main.clp`：

	```(clips)
		(defrule parse-request
		 =>
		  (assert (request-line (readline net-in))))
		
		(defrule process-request
		  (request-line ?)
		 =>
		  (bind ?body "<p>Hello, world</p>")
		
		  (format net-out
		          "HTTP/1.1 200 OK%r
		Content-Type: text/html%r
		Content-Length: %d%r
		%r
		%s" (str-length ?body) ?body))
		
		(watch activations)
		(watch facts)
		(watch rules)

	`Makefile`：

	```(makefile)
		.PHONY: clean
		
		serve: serve.o
			make PLATFORM=Linux -C clips libclips.a
			$(CC) -s -o $@ $^ clips/libclips.a -lm
		
		serve.o: serve.c
		
		clean:
			rm -f serve serve.o
